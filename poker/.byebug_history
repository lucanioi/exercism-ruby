exit
pair = score(hand, as: :pairs).first
three_of_a_kind = score(hand, as: :three_of_a_kind)
exit
three_of_a_kind = score(hand, as: :three_of_a_kind).first
exit
continue
3.to_a
3.to_ary
nil.to_a
nil.to_ary
Array([[[[1]]]])
Array([nil])
Array(nil)
find_duplicates(hand, 3).first
exit
continue
c
continue
hand.score
[pair, three_of_a_kind]
pair = score(hand, as: :pairs).find { |score| score != three_of_a_kind } || 0
three_of_a_kind = score(hand, as: :three_of_a_kind).first
    [pair, three_of_a_kind]
    return [0, 0] if three_of_a_kind.zero? || pair.zero?
    pair = score(hand, as: :pairs).find { |score| score != three_of_a_kind } || 0
    three_of_a_kind = score(hand, as: :three_of_a_kind).first
exit
[pair, three_of_a_kind]
return [nil, nil] if three_of_a_kind.nil? || pair.nil?
pair = score(hand, as: :pairs).first
three_of_a_kind = score(hand, as: :three_of_a_kind).first
hand.values
continue
find_duplicates(hand, 4).first || 0
hand.values
three_of_a_kind = score(hand, as: :three_of_a_kind).first
exit
hand
